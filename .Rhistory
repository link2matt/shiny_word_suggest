lm1 <- lm(galton$child ~ galton$parent)
g <- g + geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], size = 3, colour = grey(.5))
g
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x * w)
x * w
mean(x * w)/sum(w)
sum(w)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
qplot(x, y)
lm( y ~ x)$int
?lm
lm(y~x)$coefficients
lm(y~x)$coefficients[1]
y2 <- y - lm(y~x)$coefficients[1]
qplot(y,x)
qplot(x,y)
lm(y2 ~ x)
data("mtcars")
mtcars
str(mtcars)
lm(mtcars$mpg ~ mtcars$weight)
lm(mtcars$mpg ~ mtcars$wt)
lm(mtcars$wt ~ mtcars$mpg)
.4 * 1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x <- x - mean(x)
x
x <- x/sd(x)
sd(x)
x
y
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
qplot(x,y)
x <- x - mean(x)
qplot(x,y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
cor(galton$child, galton$parent)
cor(galton$parent, galton$child)
x <- -20, -10, 0, 10, 20
x <- c(-20,-10,0,10,20)
y <- c(-10,-5,0,5,10)
lm(y~x)
cor(y~x)
cor(y ~ x)
cor(y,x)
y <- c(-10,-15,-5,-)
x <- rnorm(10)
y <- x * 5
lm(y ~ x)
cor(y, x)
x <- rnorm(100, mean=0, sd = 1)
y <- rnomr(100, mean=0, sd = 2)
y <- rnorm(100(mean=0, sd = 2)
y <- rnorm(100, mean=0, sd = 2)
qplot(x,y)
y <- y * .5
qpot(x,y)
qplot( x, y)
cor(x, y)
cor(y, x)
lm ( y ~ x)
x <- rnorm((1000, mean=5, sd=1))
x <- rnorm(1000, mean=5, sd=1)
y <- rnorm(1000, mean=5, sd=2)
str(y)
sum(y)
summary(y)
x <- rnorm(1000, mean=10, sd =1 )
y <- rnorm(1000, mean=10, sd=2)
summary(y)
qplot(x, y)
y <- y *1.5
cor(x,y)
qplot(x*y)
qplot(x,y)
1/1.5
y <- y/0.66666667
y < y * 5
y <- y * 5
qplot(x,y)
y <- y/5
y
x <- x*y
qplot(x,y)
sd(x)
sd(y)
y < x *y
y <- x * y
qplot(x, y)
sd(x)
sd(y)
?seq
se(1,100,1)
seq(1,100,1)
x<-seq(-50,50,1)
y<-seq(-100,100,2)
qplot(x,y)
x <- y
y<-seq(-50,50,1)
qplot(x,y)
summary(x)
str(x)
xsd <- rnorm(100, mean=0, sd=1)
x <- x*xsd
x <- x * xsd
xsd <- rnorm(101, mean=0, sd=1)
x <- x * xsd
qplot(x,y)
xsd
ysd <- rnorm(101,mean=0, sd=2)
y <- y * ysd
qplot(x,y)
cor(x,y)
x <- seq(-100,100,1)
y <- seq(-50,50,.5)
qplot(x,y)
x <- x-xsd
x <- seq(-100, 100, 2)
y <- seq(-50,50,1)
xsd <- rnorm(101, sd=100)
x <- x + xsd
qplot(x,y)
y <- rnorm(101, sd=50)
y <- y + ysd
qplot(x,y)
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1)
g = g + geom_vline(xintercept = 0)
g = g + geom_hline(yintercept = 0)
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1)
g = g + geom_vline(xintercept = 0) ##axis
g = g + geom_hline(yintercept = 0) ##axis
g = g + geom_abline(intercept = 0, slope = rho, size = 1, color="yellow")
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 3)
g
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1) ##identity line
g = g + geom_vline(xintercept = 0) ##axis
g = g + geom_hline(yintercept = 0) ##axis
g = g + geom_abline(intercept = 0, slope = rho, size = 2, color="yellow")
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 1, color="blue
")
g
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1) ##identity line
g = g + geom_vline(xintercept = 0) ##axis
g = g + geom_hline(yintercept = 0) ##axis
g = g + geom_abline(intercept = 0, slope = rho, size = 2, color="yellow")
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 1, color="blue")
g
?rm
rm(list=ls())
library(swirl)
swirl()
install_from_swirl("Regression_Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs- rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
##Plot of the data
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price),)
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
library(datasets); data("swiss")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library(datasets); data("swiss")
library(ggplot2)
library(GGally)
library(datasets); data("swiss")
library(ggplot2)
library(GGally)
g = ggpairs(swiss, lower = list(continuous = "smooth"))
g
summary(lm(Fertility ~ ., data = swiss))$coefficients
summray(lm(Fertility ~ Agriculture, data = swiss))
summary(lm(Fertility ~ Agriculture, data = swiss))
n = 100; x2 <- 1 : n; x1 = .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
plot(x1,y)
plot(x2, y)
summary(lm(y ~ x1))$coef
summary(lm(y ~ x1 + x2))$coef
n = 100; x2 <- 1 : n; x1 = .01 * x2 + runif(n, -.1, .1);
y = -x1 + x2 + rnorm(n, sd = .01)
y
x1
dat = data.frame(y = y, x1 = x1, x2 = x2, ey = resid(lm(y ~ x2)), ex1 = (lm(x1 ~ x2)))
dat = data.frame(y = y, x1 = x1, x2 = x2, ey = resid(lm(y ~ x2)), ex1 = resid(lm(x1 ~ x2)))
g = g2 + geom_point(colour = "grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black") + geom_point(size = 4)
g2 = ggplot(dat, aes(y = ey, x = ex1, colour = x2))
g = g2 + geom_point(colour = "grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black") + geom_point(size = 4)
g2
g2 = ggplot(dat, aes(y = ey, x = ex1, colour = x2))
g2 = g2 + geom_point(colour = "grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black") + geom_point(size = 4)
g2
g = ggplot(dat, aes(y = y, x = x1, colour = x2))
g = g + geom_point(colour = "grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black") + geom_point(size = 4)
g
g2 = ggplot(dat, aes(y = ey, x = ex1, colour = x2))
g2 = g2 + geom_point(colour = "grey50", size = 5) + geom_smooth(method = lm, se = FALSE, colour = "black") + geom_point(size = 4)
g2
ey
View(dat)
lm(Fertility ~ . + z, data = swiss)
z <- swiss$Agriculture + swiss$Education
lm(Fertility ~ . + z, data = swiss)
source('~/.active-rstudio-document')
require(datasets);data(InsectSprays); require(stats); require(ggplot2)
g = ggplot(data = InsectSprays, aes(y = count, x = spray, fill  = spray))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of spray") + ylab("Insect count")
g
summary(lm(count ~ spray, data = InsectSprays))$coef
summary(lm(
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays
))$coef
View(InsectSprays)
summary(lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays
))$coef
library(UsingR); data(galton); library(reshape); library(dplyr); library(ggplot2)
library(manipulate)
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
plot(density(spam&your [spam$type=="nonspam"]), col="blue", main="",xlab="Freq of 'your'")
plot(density(spam&your[spam$type=="nonspam"]), col="blue", main="",xlab="Freq of 'your'")
plot(density(spam$your[spam$type=="nonspam"]),
col="blue",main="",xlab="Frequency of 'your'")
plot(density(spam$your[spam$type=="nonspam"]), col="blue", main="",xlab="Freq of 'your'")
lines(density(spam$your[spam$type=="spam"]), col="red")
abline(v=0.t,col="black")
abline(v=0.5,col="black")
prediction <- ifelse(spam$your > 0.5, "spam","nonspam")
table(prediction,spam$type)/length(spam$type)
str(spam)
prediction
table(prediction,spam$type)
library(kernlab); data(spam); set.seed(333)
library(kernlab); data(spam); set.seed(333)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
smapLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve,col=spamLabel)
spamLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve,col=spamLabel)
##Apply Rule 1 to smallSpam
rule1 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.40] <- "nonspam"
prediction[(x >= 2.4 & x<= 2.45)] <- "spam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
rule1 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.40] <- "nonspam"
prediction[(x >= 2.4 & x<= 2.45)] <- "spam"
prediction[(x > 2.45 & x <= 2.70)] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA, lenghth(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve), smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve), smallSpam$type)
table(rule1(spam$capitalAve),spam$type)
table(rule2(spam$capitalAve),spam$type)
mean(rule1(spam$capitalAve)==spam$type)
mean(rule2(spam$capitalAve)==spam$type)
sum(rule1(spam$capitalAve)==spam$type)
sum(rule2(spam$capitalAve)==spam$type)
rm(list = ls())
install.packages("RWeka")
library(tm)
library(RWeka)
data("crude")
crude <- as.VCorpus(crude)
crude <- tm_map(crude, stripWhitespace)
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removeWords, stopwords("english"))
crude <- tm_map(crude, stemDocument)
options(mc.cores=1)
tdm <- TermDocumentMatrix(crude, control=list(tokenize = NGramTokenizer))
rm(list = ls())
data("crude")
crude <- as.VCorpus(crude)
crude <- tm_map(crude, stripWhitespace)
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removeWords, stopwords("english"))
crude <- tm_map(crude, stemDocument)
install.packages("SnowballC")
crude <- tm_map(crude, stemDocument)
options(mc.cores=1)
tdm <- TermDocumentMatrix(crude, control=list(tokenize = NGramTokenizer))
remove.packages("RWeka")
remove.packages("rJava")
install.packages("RWeka")
library(tm)
library(RWeka)
data("crude")
crude <- as.VCorpus(crude)
crude <- tm_map(crude, stripWhitespace)
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removeWords, stopwords("english"))
crude <- tm_map(crude, stemDocument)
options(mc.cores=1)
tdm <- TermDocumentMatrix(crude, control=list(tokenize = NGramTokenizer))
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(tm)
library(RWeka)
data("crude")
crude <- as.VCorpus(crude)
crude <- tm_map(crude, stripWhitespace)
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removeWords, stopwords("english"))
crude <- tm_map(crude, stemDocument)
options(mc.cores=1)
tdm <- TermDocumentMatrix(crude, control=list(tokenize = NGramTokenizer))
detach("package:RWeka", unload=TRUE)
library(tm)
library(RWeka)
data("crude")
crude <- as.VCorpus(crude)
crude <- tm_map(crude, stripWhitespace)
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removeWords, stopwords("english"))
crude <- tm_map(crude, stemDocument)
options(mc.cores=1)
tdm <- TermDocumentMatrix(crude, control=list(tokenize = NGramTokenizer))
library(tm)
library(RWeka)
data("crude")
crude <- as.VCorpus(crude)
crude <- tm_map(crude, stripWhitespace)
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removeWords, stopwords("english"))
crude <- tm_map(crude, stemDocument)
options(mc.cores=1)
tdm <- TermDocumentMatrix(crude, control=list(tokenize = NGramTokenizer))
install.packages("corpor")
install.packages("corpora")
library(corpora)
setwd("~/Dropbox/Study/Capstone Project/shiny_word_suggest")
clean.text <- function(text.input){
text.input <- tolower(text.input)
# text.input <- gsub(pattern = " ", " ", x = text.input)
text.input <- gsub(pattern = "\\." , " ", x = text.input)
text.input <- gsub(pattern = ",", " ", x = text.input)
text.input <- gsub(pattern = "\\!", " ", x = text.input)
text.input <- gsub(pattern = "-", " ", x = text.input)
text.input <- gsub(pattern = "\\?", " ", x = text.input)
#text.input <- gsub(pattern = "* ", " ", x = text.input)
text.input <- gsub(pattern = "[^a-zA-Z ]", "", x = text.input)
word.two <- paste0(tail(strsplit(text.input,split=" ")[[1]],2))
if (!is.na(word.two[2])) { output <- paste0(word.two[1], "_", word.two[2]) }
else { output <- word.tow[1]}
word.two
}
clean.text("i am")
clean.text(:i)
clean.text <- function(text.input){
text.input <- tolower(text.input)
# text.input <- gsub(pattern = " ", " ", x = text.input)
text.input <- gsub(pattern = "\\." , " ", x = text.input)
text.input <- gsub(pattern = ",", " ", x = text.input)
text.input <- gsub(pattern = "\\!", " ", x = text.input)
text.input <- gsub(pattern = "-", " ", x = text.input)
text.input <- gsub(pattern = "\\?", " ", x = text.input)
#text.input <- gsub(pattern = "* ", " ", x = text.input)
text.input <- gsub(pattern = "[^a-zA-Z ]", "", x = text.input)
word.two <- paste0(tail(strsplit(text.input,split=" ")[[1]],2))
paste0(word.two[1], "_", word.two[2])
}
clean.text("i am")
(!is.na(clean.text("i am")))
clean.text <- function(text.input){
text.input <- tolower(text.input)
# text.input <- gsub(pattern = " ", " ", x = text.input)
text.input <- gsub(pattern = "\\." , " ", x = text.input)
text.input <- gsub(pattern = ",", " ", x = text.input)
text.input <- gsub(pattern = "\\!", " ", x = text.input)
text.input <- gsub(pattern = "-", " ", x = text.input)
text.input <- gsub(pattern = "\\?", " ", x = text.input)
#text.input <- gsub(pattern = "* ", " ", x = text.input)
text.input <- gsub(pattern = "[^a-zA-Z ]", "", x = text.input)
word.two <- paste0(tail(strsplit(text.input,split=" ")[[1]],2))
output <- paste0(word.two[1], "_", word.two[2])
output
}
clean.text("i am")
clean.text <- function(text.input){
text.input <- tolower(text.input)
# text.input <- gsub(pattern = " ", " ", x = text.input)
text.input <- gsub(pattern = "\\." , " ", x = text.input)
text.input <- gsub(pattern = ",", " ", x = text.input)
text.input <- gsub(pattern = "\\!", " ", x = text.input)
text.input <- gsub(pattern = "-", " ", x = text.input)
text.input <- gsub(pattern = "\\?", " ", x = text.input)
#text.input <- gsub(pattern = "* ", " ", x = text.input)
text.input <- gsub(pattern = "[^a-zA-Z ]", "", x = text.input)
word.two <- paste0(tail(strsplit(text.input,split=" ")[[1]],2))
if(!is.na(word.two[2])) { output <- paste0(word.two[1], "_", word.two[2]) }
else { output <- word.two[1] }
output
}
clean.text("i am")
clean.text("i")
clean.text("blurg ")
clean.text("blurg.blurg")
shiny::runApp()
shiny::runApp()
Cardiovascular Risk Prediction
